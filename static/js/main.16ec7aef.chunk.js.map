{"version":3,"sources":["util/contenful.js","components/RecipeContainer/RecipeContainer.jsx","components/NavMenu/NavMenu.jsx","components/Recipe/Recipe.jsx","App.jsx","serviceWorker.js","index.js","components/NavMenu/logo.svg"],"names":["client","require","createClient","space","accessToken","environment","RecipeContainer","match","useState","recipes","setRecipes","useEffect","category","query","upperCased","replace","c","toUpperCase","getEntries","getRecipes","params","then","entries","items","className","length","map","recipe","to","sys","id","key","fields","title","NavMenu","src","Logo","alt","Recipe","undefined","setRecipe","getRecipe","amount","ingredients","instructions","documentToReactComponents","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"uRAEMA,EAFaC,EAAQ,KAEDC,aAAa,CACrCC,MAAO,eACPC,YAAa,8CACbC,YAAa,W,OCWAC,MAXf,YAAqC,IAAVC,EAAS,EAATA,MAAS,EACJC,mBAAS,IADL,mBAC3BC,EAD2B,KAClBC,EADkB,KAQlC,OANAC,qBAAU,YDCZ,SAAoBC,GAChB,IAAIC,EAAQ,CAAC,aAAgB,UAC7B,GAAID,EAAU,CACZ,IAAME,EAAaF,EAASG,QAAQ,OAAO,SAAAC,GAAC,OAAIA,EAAEC,iBAClDJ,EAAM,eAAiBC,EAEzB,OAAOd,EAAOkB,WAAWL,ICNzBM,CAAWZ,EAAMa,OAAOR,UAAUS,MAAK,SAAAC,GACrCZ,EAAWY,EAAQC,YAEpB,CAAChB,EAAMa,OAAOR,WAEV,yBAAKY,UAAU,aAAaf,EAAQgB,OAAS,EAAIhB,EAAQiB,KAAI,SAAAC,GAAM,OAAI,kBAAC,IAAD,CAAMH,UAAU,SAASI,GAAI,WAAaD,EAAOE,IAAIC,GAAIC,IAAKJ,EAAOE,IAAIC,IAAKH,EAAOK,OAAOC,UAAgB,8D,wBCa7KC,MArBf,WACE,OACE,6BACE,6BACA,kBAAC,IAAD,CAAMN,GAAG,KAAI,yBAAKO,IAAKC,IAAMC,IAAI,WAEjC,4BACE,wBAAIN,IAAI,aACN,kBAAC,IAAD,CAAMH,GAAG,WAAT,cAEF,wBAAIG,IAAI,eACN,kBAAC,IAAD,CAAMH,GAAG,aAAT,gBAEF,wBAAIG,IAAI,aACN,kBAAC,IAAD,CAAMH,GAAG,YAAT,iB,eCUKU,MAxBf,YAA4B,IAAV/B,EAAS,EAATA,MAAS,EACGC,wBAAS+B,GADZ,mBAClBZ,EADkB,KACVa,EADU,KAOzB,GALA7B,qBAAU,YHUZ,SAAmBmB,GACjB,IAAIjB,EAAQ,CAAC,aAAgB,UAI7B,OAHIiB,IACFjB,EAAM,UAAYiB,GAEb9B,EAAOkB,WAAWL,IGdvB4B,CAAUlC,EAAMa,OAAOU,IAAIT,MAAK,SAAAC,GAC9BkB,EAAUlB,EAAQC,MAAM,SAEzB,CAAChB,EAAMa,OAAOU,KACbH,EAAQ,CAAC,IAAD,EAC0CA,EAAOK,OAApDU,EADG,EACHA,OAAQC,EADL,EACKA,YAAaC,EADlB,EACkBA,aAAcX,EADhC,EACgCA,MAC1C,OACE,yBAAKT,UAAU,aACb,wBAAIA,UAAU,UAAd,IAAyBS,EAAzB,KACA,wBAAIT,UAAU,cAAd,cAAoCkB,GACpC,wBAAIlB,UAAU,kBAAd,kBACA,6BAAMqB,oCAA0BF,IAChC,wBAAInB,UAAU,kBAAd,kBACA,6BAAMqB,oCAA0BD,KAItC,OAAO,kDCNME,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAW3C,IAC3C,kBAAC,IAAD,CAAO0C,KAAK,cAAcC,UAAWX,MCFzBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9C,MACvB,2DCZN+C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,iB,sCEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.16ec7aef.chunk.js","sourcesContent":["const contentful = require(\"contentful\");\r\n\r\nconst client = contentful.createClient({\r\n  space: \"wdg89rpqhpev\",\r\n  accessToken: \"4NdEMIEctHC8ORP-VbjqD4P51Wn9AV7YCbnllZTQszE\",\r\n  environment: 'master'\r\n});\r\n\r\nfunction getRecipes(category) {\r\n    var query = {'content_type': 'recipe'};\r\n    if (category) {\r\n      const upperCased = category.replace(/^\\w/, c => c.toUpperCase());\r\n      query['fields.type'] = upperCased;\r\n    }\r\n    return client.getEntries(query);\r\n}\r\n\r\nfunction getRecipe(id) {\r\n  var query = {'content_type': 'recipe'};\r\n  if (id) {\r\n    query['sys.id'] = id;\r\n  }\r\n  return client.getEntries(query);\r\n}\r\n\r\nexport { getRecipes };\r\nexport { getRecipe };","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getRecipes } from \"../../util/contenful\";\r\nimport \"./RecipeContainer.css\";\r\n\r\nfunction RecipeContainer( {match} ) {\r\n  const [recipes, setRecipes] = useState([]);\r\n  useEffect(() => {\r\n    getRecipes(match.params.category).then(entries => {\r\n      setRecipes(entries.items);\r\n    });\r\n  }, [match.params.category]);\r\n  \r\n  return <div className=\"container\">{recipes.length > 0 ? recipes.map(recipe => <Link className=\"recipe\" to={\"/recipe/\" + recipe.sys.id} key={recipe.sys.id}>{recipe.fields.title}</Link>): <p>Tilføj nogle opskrifter...</p>}</div>;\r\n}\r\n\r\nexport default RecipeContainer;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Logo from './logo.svg';\r\nimport \"./NavMenu.css\";\r\n\r\nfunction NavMenu() {\r\n  return (\r\n    <nav>\r\n      <div>\r\n      <Link to=\"/\"><img src={Logo} alt=\"logo\"></img></Link>\r\n      </div>\r\n      <ul>\r\n        <li key=\"forretter\">\r\n          <Link to=\"/forret\">Forretter</Link>\r\n        </li>\r\n        <li key=\"hovedretter\">\r\n          <Link to=\"/hovedret\">Hovedretter</Link>\r\n        </li>\r\n        <li key=\"desserter\">\r\n          <Link to=\"/dessert\">Desserter</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavMenu;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\r\nimport { getRecipe } from \"../../util/contenful\";\r\nimport \"./Recipe.css\";\r\n\r\nfunction Recipe( {match} ) {\r\n  const [recipe, setRecipe] = useState(undefined);\r\n  useEffect(() => {\r\n    getRecipe(match.params.id).then(entries => {\r\n      setRecipe(entries.items[0]);\r\n    });\r\n  }, [match.params.id]);\r\n  if (recipe) {\r\n    const {amount, ingredients, instructions, title } = recipe.fields;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"header\"> {title} </h1>\r\n        <h2 className=\"sub-header\">Mængde: {amount}</h2>\r\n        <h3 className=\"sub-sub-header\">Ingredisenser:</h3>\r\n        <div>{documentToReactComponents(ingredients)}</div>\r\n        <h3 className=\"sub-sub-header\">Instruktioner:</h3>\r\n        <div>{documentToReactComponents(instructions)}</div>\r\n      </div>\r\n    );\r\n  }\r\n  return <p>Henter opskrift...</p>\r\n\r\n}\r\n\r\nexport default Recipe;","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport RecipeContainer from './components/RecipeContainer/RecipeContainer'\nimport NavMenu from './components/NavMenu/NavMenu'\nimport Recipe from './components/Recipe/Recipe'\n\nfunction App() {\n  return (\n    <Router>\n      <NavMenu />\n        <Route exact path=\"/:category?\" component={RecipeContainer} />\n        <Route path=\"/recipe/:id\" component={Recipe} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.7f01d83d.svg\";"],"sourceRoot":""}